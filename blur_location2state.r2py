"""
A security layer for the functions get_location() and get_lastknown_location()
defined in getsensor.r2py. This program blurs the latitude/longitude
coordinates, received from the location sensors of an Android device,
to the geographic center of approximately the nearest state (admin area).

The blurring is done using a database lookup method. First, we use the
get_geolocation() call to get the current address. The country code in
the address returned is then used to look up the  list of states for
that country from the database. This database, located at 
http://sensibilityclearinghouse.poly.edu/data/states/, is a list of
all states and their corresponding geodata divided by country, where
each file is named with the 2-letter country code (e.g., "US.txt").

Next, we use the state name from the returned address to check for a
match with the list of states. If there is a match, the coordinates
associated with that state are returned. If there is no match, we look
for the state that has coordinates closest to the those received from
the location sensors and return its latitude and longitude.

Usage:
  start dylink.r2py encasementlib.r2py sensor_layer.r2py \
    blur_location2state.r2py user-program.r2py
"""



location_blur_helper = dy_import_module("location_blur_helper.r2py")



def load_state_geodata(address):
  """
  Loads the state(s) and corresponding geodata from the given file
  into a dictionary.
  
  Below is an example of a line from the file
  http://sensibilityclearinghouse.poly.edu/data/states/US.txt,
  with fields - state code, state name, latitude, longitude:
  US.NY    New York    43.00035    -75.4999
  
  The dictionary that is returned has the format:
  {
    state1: {"latitude": latitude, "longitude": longitude},
    state2: {"latitude": latitude, "longitude": longitude},
    ...
  }

  """
  # Use the country code to get the filename of the list of states
  # for that country.
  filename = address["country_code"] + ".txt"
  # Download the file from the state database.
  location_blur_helper.get_state_file_from_server(filename)
  # Obtain the list of states and their geodata from the file.
  states_geodata = location_blur_helper.read_data_from_file(filename)

  states_dict = {}

  # Check if we can match the state name in the given address to the
  # name in the database. If there is a match, return a dict with that
  # state and its geodata (state names are unique in each file).
  if "admin_area" in address:
    for line in states_geodata:
      # Ignore the empty line at the end of the file.
      if line == "":
        continue
      state_geodata_record = line.split("\t")
      if address["admin_area"] == state_geodata_record[1]:
        state_name = state_geodata_record[1]
        states_dict[state_name] = {
          "latitude": float(state_geodata_record[2]),
          "longitude": float(state_geodata_record[3]),
        }
        return states_dict

  # If no match, return a dict of all states and their geodata to
  # find the closest state.
  for line in states_geodata:
    # Ignore the empty line at the end of the file.
    if line == "":
      continue
    state_geodata_record = line.split("\t")
    state_name = state_geodata_record[1]
    states_dict[state_name] = {
      "latitude": float(state_geodata_record[2]),
      "longitude": float(state_geodata_record[3]),
    }

  return states_dict



def find_closest_state(lat, lon):
  """
  Finds the state closest to the given latitude/longitude pair from the
  dictionary of states returned by the load_state_geodata() function,
  and returns that state's geodata in the format:
  {
    "state_name": state name (string),
    "latitude": latitude of the center of the state (float)
    "longitude": longitude of the center of the state (float)
  }

  Note: If the load_state_geodata() function returns only one state,
  which happens when the state name from the get_geolocation() call
  was successfully matched with one of the states in the database,
  then only that state's geodata is returned in the dictionary.

  """
  # Get the address for the given coordinates. Since get_geolocation()
  # can possibly return more than one address, we take the first one.
  address = get_geolocation(lat, lon, 1)[0]

  # Load the state(s) and corresponding geodata from the file.
  states_dict = load_state_geodata(address)

  return location_blur_helper.find_closest_location(lat, lon, states_dict)



def get_state_location():
  """
  Blurring layer for the get_location() function. It replaces the exact
  coordinates of the Android device with the coordinates for the
  geographic center of the nearest state.

  """
  location_data = get_location()

  if location_data is not None:
    closest_state = find_closest_state(location_data["latitude"],
      location_data["longitude"])

    location_data["latitude"] = closest_state["latitude"]
    location_data["longitude"] = closest_state["longitude"]

  return location_data



def get_state_lastknown_location():
  """
  Blurring layer for the get_lastknown_location() function. It replaces
  the last-known coordinates of the Android device with the coordinates
  for the geographic center of the nearest state.

  """
  location_data = get_lastknown_location()

  if location_data is not None:
    # Blur the coordinates of the first non-empty location data.
    for location_provider, provider_location_data in location_data.items():
      # Skip this provider's data if it doesn't contain a previous
      # location.
      if provider_location_data is None:
        continue

      closest_state = find_closest_state(provider_location_data["latitude"],
        provider_location_data["longitude"])

      break

    # Copy the blurred coordinates into all providers' location data.
    for location_provider, provider_location_data in location_data.items():
      # Skip blurring this provider's data if it doesn't contain a previous
      # location.
      if provider_location_data is None:
        continue

      location_data[location_provider]["latitude"] = closest_state["latitude"]
      location_data[location_provider]["longitude"] = closest_state["longitude"]

  return location_data



# Mapping our blurring function get_state_location to get_location.
CHILD_CONTEXT_DEF["get_location"] = {
    "type": "func",
    "args": None,
    "return": dict,
    "exceptions": "any",
    "target": get_state_location,
}


# Mapping our blurring function get_state_lastknown_location to
# get_lastknown_location.
CHILD_CONTEXT_DEF["get_lastknown_location"] = {
    "type": "func",
    "args": None,
    "return": dict,
    "exceptions": "any",
    "target": get_state_lastknown_location,
}


# Dispatch
secure_dispatch_module()