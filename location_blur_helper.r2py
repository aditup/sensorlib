"""
This is a helper program that contains some of the common functions
shared between the blurring layers blur_location2city, blur_location2zipcode,
and blur_location2state.

"""



httpretrieve = dy_import_module("httpretrieve.r2py")
math = dy_import_module("math.r2py")



def get_file_from_server(filename, blur_level):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  The blur_level argument is an integer which indicates the blurring
  level (blurring to ZIP code, city or state):
  0 - zipcode
  1 - city
  2 - state

  """
  if filename not in listfiles():
    if blur_level == 0:
      folder = "zip/"
    elif blur_level == 1:
      folder = "quad/"
    elif blur_level == 2:
      folder = "states/"
    url = "http://sensibilityclearinghouse.poly.edu/data/" + folder + \
      filename
    httpretrieve.httpretrieve_save_file(url, filename.lower())



def get_database_filename(lat, lon):
  """
  Returns the filename of the cell in the database to which the given
  latitude/longitude pair belongs.

  """
  # Get ceiling as x/y index.
  x = int(math.math_ceil(lat))
  y = int(math.math_ceil(lon))
  filename = str(x) + '_' + str(y) + ".txt"
  return filename



def find_squared_difference(p1, p2):
  """
  Returns the squared difference between the two given pairs of
  coordinates (p1 and p2, where p1 and p2 are tuples of the form
  (latitude, longitude)).

  """
  lat1, lon1 = p1
  lat2, lon2 = p2
  lat_diff = (lat1-lat2) ** 2
  lon_diff = (lon1-lon2) ** 2
  return lat_diff + lon_diff



def find_closest_blur_level(lat, lon, blur_level_dict):
  """

  """
  # Check if there is only one entry in the dictionary.
  if len(blur_level_dict) == 1:
    closest_blur_level = blur_level_dict.keys()[0]

  # Else find closest blur level area (ZIP code area, city or state).
  else:
    # Set the minimum squared difference between two pairs of coordinates
    # to a number larger than any possible minimum distance to a close
    # blur level area (ZIP code area, city or state) in the current
    # latitude/longitude quadilateral.
    min_diff = 9999

    for blur_level, blur_level_geodata in blur_level_dict.items():
      diff = find_squared_difference((lat, lon), (blur_level_geodata["latitude"],
        blur_level_geodata["longitude"]))
      if diff < min_diff:
        min_diff = diff
        closest_blur_level = blur_level

  closest_blur_level_geodata = {
    "name": closest_blur_level,
    "latitude": blur_level_dict[closest_blur_level]["latitude"], 
    "longitude": blur_level_dict[closest_blur_level]["longitude"],
   }

  return closest_blur_level_geodata