"""
This is a helper program that contains some of the common functions
shared between the blurring layers blur_location2city, blur_location2zipcode,
blur_location2state and blur_location2country.

"""



httpretrieve = dy_import_module("httpretrieve.r2py")
math = dy_import_module("math.r2py")



def get_zipcode_file_from_server(filename):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  The database is located at:
  http://sensibilityclearinghouse.poly.edu/data/zip/

  """
  if filename not in listfiles():
    url = "http://sensibilityclearinghouse.poly.edu/data/zip/" + filename
    httpretrieve.httpretrieve_save_file(url, filename)



def get_city_file_from_server(filename):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  The database is located at:
  http://sensibilityclearinghouse.poly.edu/data/quad/

  """
  if filename not in listfiles():
    url = "http://sensibilityclearinghouse.poly.edu/data/quad/" + filename
    httpretrieve.httpretrieve_save_file(url, filename)



def get_state_file_from_server(filename):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  The database is located at:
  http://sensibilityclearinghouse.poly.edu/data/states/

  """
  if filename not in listfiles():
    url = "http://sensibilityclearinghouse.poly.edu/data/states/" + filename
    httpretrieve.httpretrieve_save_file(url, filename.lower())



def get_country_file_from_server(filename):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  The database is located at:
  http://sensibilityclearinghouse.poly.edu/data/countries.txt

  """
  if filename not in listfiles():
    url = "http://sensibilityclearinghouse.poly.edu/data/" + filename
    httpretrieve.httpretrieve_save_file(url, filename)



def get_database_filename(lat, lon):
  """
  Returns the filename of the cell in the database to which the given
  latitude/longitude pair belongs.

  """
  # Get ceiling as x/y index.
  x = int(math.math_ceil(lat))
  y = int(math.math_ceil(lon))
  filename = str(x) + '_' + str(y) + ".txt"
  return filename



def find_squared_difference(p1, p2):
  """
  Returns the squared difference between the two given pairs of
  coordinates (p1 and p2, where p1 and p2 are tuples of the form
  (latitude, longitude)).

  """
  lat1, lon1 = p1
  lat2, lon2 = p2
  lat_diff = (lat1-lat2) ** 2
  lon_diff = (lon1-lon2) ** 2
  return lat_diff + lon_diff



def read_data_from_file(filename):
  """
  Reads all data from the given file and returns a list of the lines
  in that file.

  """
  fileobj = openfile(filename.lower(), False)
  file_data = fileobj.readat(None, 0).split("\n")
  fileobj.close()
  return file_data



def find_closest_location(lat, lon, location_dict):
  """
  Returns a dictionary with the name and coordinates of the center of
  the closest location to the given latitude and longitude coordinates.
  This location, depending on the level of blurring, could be the
  closest city, state, ZIP code area or country.

  The argument "location_dict" contains a list of all nearby
  locations (either cities, states, ZIP code areas or countries) and
  their geodata (latitude and longitude).

  The dictionary returned has the format:
  {
    "name": name of the closest location (string),
    "latitude": latitude of the center of the above location (float), 
    "longitude": longitude of the center of the above location (float)
  }
  """
  # Check if there is only one entry in the dictionary, (e.g., in a state
  # file like this http://sensibilityclearinghouse.poly.edu/data/states/US.txt
  # there's only one entry that matches the state name)
  if len(location_dict) == 1:
    closest_location = location_dict.keys()[0]

  # Else find closest location.
  else:
    # Set the minimum squared difference between two pairs of coordinates
    # to a number larger than any possible minimum distance to a close
    # location in the current latitude/longitude cell (in case of
    # blurring to city/ZIP code area), in the current country (in
    # case of blurring to state), or in the entire world (in case of
    # blurring to country).
    min_diff = 9999

    for current_location, location_geodata in location_dict.items():
      diff = find_squared_difference((lat, lon), (location_geodata["latitude"],
        location_geodata["longitude"]))
      if diff < min_diff:
        min_diff = diff
        closest_location = current_location

  closest_location_geodata = {
    "name": closest_location,
    "latitude": location_dict[closest_location]["latitude"], 
    "longitude": location_dict[closest_location]["longitude"]
   }

  return closest_location_geodata