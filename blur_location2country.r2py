"""
A security layer for the functions get_location() and get_lastknown_location()
defined in getsensor.r2py. This program blurs the latitude/longitude
coordinates, received from the location sensors of an Android device,
to the geographic center of the country to which it belongs.

The blurring is done using a database lookup method. First, we use the
get_geolocation() call to get the current address. The country code 
("country_code") in the address returned is then used to find a match
in the database "countries.txt", which is a list of all countries and
their geodata (country code, latitude, longitude). The country code is
the ISO-3166 2-letter code assigned to the country and the latitude and
longitude coordinates represent the geographical center of the country.
This database file is located at:
http://sensibilityclearinghouse.poly.edu/data/

Usage:
  start dylink.r2py encasementlib.r2py sensor_layer.r2py \
    blur_location2country.r2py user-program.r2py
"""



httpretrieve = dy_import_module("httpretrieve.r2py")
math = dy_import_module("math.r2py")



def get_file_from_server(filename):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  """
  if filename not in listfiles():
    url = "http://sensibilityclearinghouse.poly.edu/data/" + filename
    httpretrieve.httpretrieve_save_file(url, filename.lower())



def load_country_geodata(address):
  """
  Finds the country in the database which has the same country code as
  that in the given address and returns a dictionary with that country's
  name, latitude and longitude.

  Below is an example of a line from the database of countries -
  "countries.txt" (country code, name, latitude and longitude):
  US    United States    39.76    -98.5

  The dictionary returned has the format:
  {
    "country_name": state name (string),
    "latitude": latitude of the geographic center of the country (float)
    "longitude": longitude of the geographic center of the country (float)
  }

  """
  # Download the database of countries.
  get_file_from_server("countries.txt")

  # Open the database of countries and read all data.
  countries_geodata_fileobj = openfile("countries.txt", False)
  countries_geodata_file = countries_geodata_fileobj.readat(None, 0).split("\n")
  countries_geodata_fileobj.close()

  # Compare the country code from the address with the country code for
  # each country in the database to find a match.
  for line in countries_geodata_file:
    # Ignore the empty line at the end of the file.
    if line == "":
      continue
    country_geodata_record = line.split("\t")
    # If there is a match, return the country name and its coordinates.
    if address["country_code"] == country_geodata_record[0]:
      country_geodata = {
        "country_name": country_geodata_record[1],
        "latitude": float(country_geodata_record[2]),
        "longitude": float(country_geodata_record[3])
      }
      return country_geodata

  # XXX will there ever not be a match?



def get_country_location():
  """
  Blurring layer for the get_location() function. It replaces the exact
  coordinates of the Android device with the coordinates for the
  geographic center of the country to which they belong.

  """
  location_data = get_location()

  # Get the first address from the list of addresses returned by
  # get_geolocation().
  address = get_geolocation(location_data["latitude"],
    location_data["longitude"], 1)[0]

  country_geodata = load_country_geodata(address)

  location_data["latitude"] = country_geodata["latitude"]
  location_data["longitude"] = country_geodata["longitude"]

  return location_data



def get_country_lastknown_location():
  """
  Blurring layer for the get_lastknown_location() function. It replaces
  the last-known coordinates of the Android device with the coordinates
  for the geographic center of the country to which they belong.

  """
  location_data = get_lastknown_location()

  # Get the location from every provider.
  for location_provider, provider_location_data in location_data.items():
    # Skip blurring this provider's data if it doesn't contain a previous
    # location.
    if provider_location_data is None:
      continue

    # Get the first address from the list of addresses returned by
    # get_geolocation().
    address = get_geolocation(provider_location_data["latitude"],
      provider_location_data["longitude"], 1)[0]

    country_geodata = load_country_geodata(address)

    location_data[location_provider]["latitude"] = country_geodata["latitude"]
    location_data[location_provider]["longitude"] = country_geodata["longitude"]

  return location_data



# Mapping our blurring function get_country_location to get_location.
CHILD_CONTEXT_DEF["get_location"] = {
    "type": "func",
    "args": None,
    "return": dict,
    "exceptions": "any",
    "target": get_country_location,
}


# Mapping our blurring function get_country_lastknown_location to
# get_lastknown_location.
CHILD_CONTEXT_DEF["get_lastknown_location"] = {
    "type": "func",
    "args": None,
    "return": dict,
    "exceptions": "any",
    "target": get_country_lastknown_location,
}


# Dispatch.
secure_dispatch_module()