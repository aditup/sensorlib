"""
A security layer for the functions get_location() and get_lastknown_location()
defined in getsensor.r2py. This program blurs the latitude/longitude
coordinates, received from the location sensors of an Android device,
to the geographic center of approximately the nearest city.

The blurring is done using a database lookup method. The database,
located at http://sensibilityclearinghouse.poly.edu/data/quad/, contains
a list of cities and their geodata (latitude, longitude, country code,
state code), divided by their latitude/longitude coordinates into cells.
Each cell is a separate file in the database, whose name is derived as
"ceiling(latitude)_ceiling(longitude).txt". For example, Manhattan has
its center at coordinates 40.78343, -73.96625, so it will be mapped to
the file with name "41_-73.txt".

Usage:
  start dylink.r2py encasementlib.r2py sensor_layer.r2py \
    blur_location2city.r2py user-program.r2py
"""



httpretrieve = dy_import_module("httpretrieve.r2py")
math = dy_import_module("math.r2py")



def load_city_geodata(filename):
  """
  Loads all the cities and their geodata from the given file into a
  dictionary. The dictionary that is returned has the format:
  {
    city1: {"latitude": latitude, "longitude": longitude, "country_code":
    country_code, "state_code": state_code},
    city2: {"latitude": latitude, "longitude": longitude, "country_code":
    country_code, "state_code": state_code},
    ...
  }

  """
  get_file_from_server(filename)
  city_dict = {}
  city_geodata_fileobj = openfile(filename, False)
  city_geodata_file = city_geodata_fileobj.readat(None, 0).split("\n")
  city_geodata_fileobj.close()

  for line in city_geodata_file:
    # Ignore the empty line at the end of the file.
    if line == "":
      continue
    city_geodata_record = line.split("\t")
    city_name = city_geodata_record[0]
    city_dict[city_name] = {
      "latitude": float(city_geodata_record[1]),
      "longitude": float(city_geodata_record[2]),
      "country_code": city_geodata_record[3],
      "state_code": city_geodata_record[4]
    }

  return city_dict



def get_file_from_server(filename):
  """
  Downloads the required file from the database server, if it has not
  already been downloaded.

  """
  if filename not in listfiles():
    url = "http://sensibilityclearinghouse.poly.edu/data/quad/" + filename
    httpretrieve.httpretrieve_save_file(url, filename)



def find_closest_city(lat, lon):
  """
  Finds the city closest to the given latitude/longitude pair from the
  dictionary of cities returned by the load_city_geodata() function,
  and returns that city's geodata in the format:
  {
    "city_name": city name (string),
    "state_code": 2-digit code representing the state to which the city
      belongs (string),
    "country_code": 2-letter ISO-3166 code representing the country to
      which the city belongs (string),
    "latitude": latitude of the geographic center of the city (float)
    "longitude": longitude of the geographic center of the city (float)
  }

  Note: We're looking for the closest city within the same cell as the
  given latitude/longitude pair. There might be a closer city in the
  surrounding cells.

  """
  # Determine which file to download from the database.
  filename = get_database_filename(lat, lon)

  # Load all the cities and their geodata from the file.
  city_dict = load_city_geodata(filename)

  # Set the minimum squared difference between two pairs of coordinates
  # to a number larger than any possible minimum distance to a close
  # city in the current latitude/longitude quadrilateral.
  min_diff = 9999

  for city_name, city_geodata in city_dict.items():
    diff = find_squared_difference((lat, lon), (city_geodata["latitude"],
      city_geodata["longitude"]))
    if diff < min_diff:
      min_diff = diff
      closest_city_name = city_name

  closest_city_geodata = {
    "city_name": closest_city_name,
    "latitude": city_dict[closest_city_name]["latitude"], 
    "longitude": city_dict[closest_city_name]["longitude"],
    "state_code": city_dict[closest_city_name]["state_code"],
    "country_code": city_dict[closest_city_name]["country_code"]
   }

  return closest_city_geodata



def get_database_filename(lat, lon):
  """
  Returns the filename of the cell in the database to which the given
  latitude/longitude pair belongs.

  """
  # Get ceiling as x/y index.
  x = int(math.math_ceil(lat))
  y = int(math.math_ceil(lon))
  filename = str(x) + '_' + str(y) + ".txt"
  return filename



def find_squared_difference(p1, p2):
  """
  Returns the squared difference between the two given pairs of
  coordinates (p1 and p2, where p1 and p2 are tuples of the form
  (latitude, longitude)).

  """
  lat1, lon1 = p1
  lat2, lon2 = p2
  lat_diff = (lat1-lat2) ** 2
  lon_diff = (lon1-lon2) ** 2
  return lat_diff + lon_diff



def get_city_location():
  """
  Blurring layer for the get_location() function. It replaces the exact
  coordinates of the Android device with the coordinates for the
  geographic center of the nearest city.

  """
  location_data = get_location()

  closest_city = find_closest_city(location_data["latitude"],
    location_data["longitude"])

  location_data["latitude"] = closest_city["latitude"]
  location_data["longitude"] = closest_city["longitude"]

  return location_data



def get_city_lastknown_location():
  """
  Blurring layer for the get_lastknown_location() function. It replaces
  the last-known coordinates of the Android device with the coordinates
  for the geographic center of the nearest city.

  """
  location_data = get_lastknown_location()

  # Get the location from every provider.
  for location_provider, provider_location_data in location_data.items():
    # Skip blurring this provider's data if it doesn't contain a previous
    # location.
    if provider_location_data is None:
      continue

    closest_city = find_closest_city(provider_location_data["latitude"],
      provider_location_data["longitude"])

    location_data[location_provider]["latitude"] = closest_city["latitude"]
    location_data[location_provider]["longitude"] = closest_city["longitude"]

  return location_data



# Mapping our blurring function get_city_location to get_location.
CHILD_CONTEXT_DEF["get_location"] = {
    "type": "func",
    "args": None,
    "return": dict,
    "exceptions": "any",
    "target": get_city_location,
}


# Mapping our blurring function get_city_lastknown_location to
# get_lastknown_location.
CHILD_CONTEXT_DEF["get_lastknown_location"] = {
    "type": "func",
    "args": None,
    "return": dict,
    "exceptions": "any",
    "target": get_city_lastknown_location,
}


# Dispatch.
secure_dispatch_module()